apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
data:
  # file-like keys
  application-props: |
    micronaut.application.name=api
    micronaut.server.port=8080

    rest.db-crud.url=http://internal:8080

    endpoints.all.port=8081

    probes.enabled=false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  labels:
    app: api-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-pod
  template:
    metadata:
      labels:
        app: api-pod
    spec:
      # ожидание терминации при нормальном выключении
      terminationGracePeriodSeconds: 10
      containers:
        - name: api
          image: api:v1.0
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8081
            # проба берется раз в periodSeconds с момента старта,
            # но не в первые initialDelaySeconds
            initialDelaySeconds: 25
            periodSeconds: 10
            # при таких параметрах первая проба возьмется через 30 секунд

            # после failureThreshold неудачных проб контейнер перезапустят
            failureThreshold: 3

            # ожидание терминации при падении liveness пробы
            terminationGracePeriodSeconds: 5
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: api-config
            items:
            - key: "application-props"
              path: "application.properties"
---
apiVersion: v1
kind: Service
metadata:
  name: api             # можно использовать как host
spec:
  selector:
    app: api-pod
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8080        # service port
      targetPort: 8080  # container port
      nodePort: 30001
